# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# see org.apache.kafka.clients.consumer.ConsumerConfig for more details

# list of brokers used for bootstrapping knowledge about the rest of the cluster
# format: host1:port1,host2:port2 ...
bootstrap.servers=localhost:9092

# consumer group id
#group.id=test-consumer-group

# Protocol used to communicate with brokers.
security.protocol=PLAINTEXT

# Serializer class for key that implements the org.apache.kafka.common.serialization.Serializer interface.
key.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer

# Serializer class for value that implements the org.apache.kafka.common.serialization.Serializer interface.
value.deserializer=org.apache.kafka.common.serialization.ByteArrayDeserializer

# If true the consumer's offset will be periodically committed in the background
enable.auto.commit=false

# The frequency in milliseconds that the consumer offsets are auto-committed to Kafka if enable.auto.commit is set to true.
auto.commit.interval.ms=5000

# The timeout used to detect client failures when using Kafka's group management facility.
# The client sends periodic heartbeats to indicate its liveness to the broker.
session.timeout.ms = 10000

# The expected time between heartbeats to the consumer coordinator when using Kafka's group management facilities.
# Heartbeats are used to ensure that the consumer's session stays active and to facilitate rebalancing
# when new consumers join or leave the group. The value must be set lower than ession.timeout.ms,
# but typically should be set no higher than 1/3 of that value. It can be adjusted even lower to control
# the expected time for normal rebalances.
heartbeat.interval.ms=3000

# What to do when there is no initial offset in Kafka or if the current
# offset does not exist any more on the server: latest, earliest, none
auto.offset.reset=earliest

# Controls how to read messages written transactionally.
#isolation.level=read_committed

# A list of class names or class types, ordered by preference, of supported assignors responsible for the partition
# assignment strategy that the client will use to distribute partition ownership amongst consumer instances when
# group management is used. Implementing the org.apache.kafka.clients.consumer.ConsumerPartitionAssignor
# interface allows you to plug in a custom assignment strategy.";
partition.assignment.strategy=org.apache.kafka.clients.consumer.StickyAssignor

# The maximum amount of data per-partition the server will return. Records are fetched in batches by the consumer.
# If the first record batch in the first non-empty partition of the fetch is larger than this limit, the batch will
# still be returned to ensure that the consumer can make progress. The maximum record batch size accepted by the
# broker is defined via message.max.bytes (broker config) or max.message.bytes (topic config). See
# fetch.max.bytes for limiting the consumer request size.
max.partition.fetch.bytes=5242880

# The maximum delay between invocations of poll() when using consumer group management. This places an upper bound
# on the amount of time that the consumer can be idle before fetching more records. If poll() is not called before
# expiration of this timeout, then the consumer is considered failed and the group will rebalance in order to
# reassign the partitions to another member. For consumers using a non-null group.instance.id which reach this timeout,
# partitions will not be immediately reassigned. Instead, the consumer will stop sending heartbeats and partitions will
# be reassigned after expiration of session.timeout.ms. This mirrors the behavior of a static consumer which has shutdown.
max.poll.interval.ms=300000

############################# Producer Metrics #############################

# The number of samples maintained to compute metrics.
# Default = 2
metrics.num.samples = 100

# The window of time a metrics sample is computed over.
# Default = 30000
metrics.sample.window.ms=10000

# The highest recording level for metrics.
# Default:	INFO
# Valid Values:	[INFO, DEBUG]
metrics.recording.level=INFO

