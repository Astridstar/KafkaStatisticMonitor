# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# see org.apache.kafka.clients.producer.ProducerConfig for more details

############################# Producer Basics #############################

# list of brokers used for bootstrapping knowledge about the rest of the cluster
# format: host1:port1,host2:port2 ...
bootstrap.servers=<PRODUCER_BOOTSTRAP_SERVER>

# specify the compression codec for all data generated: none, gzip, snappy, lz4, zstd
compression.type=none

# name of the partitioner class for partitioning events; default partition spreads data randomly
#partitioner.class=

# the maximum amount of time the client will wait for the response of a request
#request.timeout.ms=

# how long `KafkaProducer.send` and `KafkaProducer.partitionsFor` will block for
#max.block.ms=

# the producer will wait for up to the given delay to allow other records to be sent so that the sends can be batched together
linger.ms=1

# the maximum size of a request in bytes
#max.request.size=

# the default batch size in bytes when batching multiple records sent to a partition
batch.size=16384

# the total bytes of memory the producer can use to buffer records waiting to be sent to the server
buffer.memory=33554432

# The number of acknowledgments the producer requires the leader to have received before considering a
# request complete. This controls the durability of records that are sent. The following settings are allowed:
# 0 - producer will not wait for any acknowledgment from the server at all. The record will be immediately added
#     to the socket buffer and considered sent. No guarantee can be made that the server has received the record
#     in this case, and the <code>retries</code> configuration will not take effect (as the client won't
#     generally know of any failures). The offset given back for each record will always be set to 1
# 1 - Leader will write the record to its local log but will respond without awaiting full acknowledgement
#     from all followers. In this case should the leader fail immediately after acknowledging the record but
#     before the followers have replicated it then the record will be lost.
# all - Leader will wait for the full set of in-sync replicas to acknowledge the record. This guarantees that
#       the record will not be lost as long as at least one in-sync replica remains alive. This is the
#       strongest available guarantee. This is equivalent to the acks=-1 setting.
acks=all

# Setting a value greater than zero will cause the client to resend any request that fails with a potentially transient error.
retries=5

# Serializer class for key that implements the org.apache.kafka.common.serialization.Serializer interface.
key.serializer=org.apache.kafka.common.serialization.IntegerSerializer

# Serializer class for value that implements the org.apache.kafka.common.serialization.Serializer interface.
value.serializer=org.apache.kafka.common.serialization.ByteArraySerializer

# The maximum amount of time in ms that the transaction coordinator will wait for a transaction status
# update from the producer before proactively aborting the ongoing transaction.  If this value is larger
# than the transaction.max.timeout.ms setting in the broker, the request will fail with a
# InvalidTransactionTimeout error.
transaction.timeout.ms = 1000

# When set to 'true', the producer will ensure that exactly one copy of each message is written in the stream.
# If 'false', producer retries due to broker failures, etc., may write duplicates of the retried message in
# the stream. Note that enabling idempotence requires MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION to be less than or equal to 5,
# RETRIES_CONFIG to be greater than 0 and ACKS_CONFIG must be 'all'. If these values are not explicitly set by the user,
# suitable values will be chosen. If incompatible values are set, a ConfigException will be thrown.
enable.idempotence=true
